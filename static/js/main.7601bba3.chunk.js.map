{"version":3,"sources":["components/MovieList.js","actions/index.js","components/MovieDetails.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["mapDispatchToProps","selectMovie","movie","type","payload","connect","state","movies","_ref","listItems","map","react_default","a","createElement","key","title","className","onClick","class","selectedMovie","releaseDate","rating","App","components_MovieList","components_MovieDetails","Component","Boolean","window","location","hostname","match","combineReducers","arguments","length","undefined","action","ReactDOM","render","es","store","createStore","reducers","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAgCMA,EAAqB,CACvBC,YC/BuB,SAACC,GACxB,MAAM,CACFC,KAAK,iBACLC,QAASF,KD+BFG,cAVS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAMC,SAQkBP,EAAzBK,CA9BG,SAAAG,GAA6B,IAA1BD,EAA0BC,EAA1BD,OAAQN,EAAkBO,EAAlBP,YACfQ,EAAYF,EAAOG,IAAI,SAACR,GAC1B,OACIS,EAAAC,EAAAC,cAAA,OAAKC,IAAKZ,EAAMa,OAChBJ,EAAAC,EAAAC,cAAA,QAAMG,UAAU,kCAAkCd,EAAMa,OACxDJ,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAAcC,QAAS,kBAAMhB,EAAYC,KAA3D,cAKR,OACIS,EAAAC,EAAAC,cAAA,OAAKG,UAAU,sCACXL,EAAAC,EAAAC,cAAA,yBAAgBF,EAAAC,EAAAC,cAAA,KAAGK,MAAM,kBACzBP,EAAAC,EAAAC,cAAA,UACEJ,MEiBHJ,qBANS,SAACC,GACrB,MAAO,CACHa,cAAeb,EAAMa,gBAIdd,CAhCM,SAAAG,GAAuB,IAApBW,EAAoBX,EAApBW,cACpB,OAAIA,EAWIR,EAAAC,EAAAC,cAAA,OAAKG,UAAU,yCACXL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,QAAd,mBACAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACXL,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,mBAAWM,EAAcJ,OACzBJ,EAAAC,EAAAC,cAAA,0BAAkBM,EAAcC,aAChCT,EAAAC,EAAAC,cAAA,oBAAYM,EAAcE,WAflCV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBACXL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,QAAd,iBAAmCL,EAAAC,EAAAC,cAAA,KAAGK,MAAM,qBCa7CI,mLAZX,OACEX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,0BAAd,eACAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAACW,EAAD,eAPQC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECOSC,cAAgB,CAC3BxB,OAtBmB,WACnB,MAAM,CACF,CAACQ,MAAO,yBAA0BK,YAAa,aAAcC,OAAQ,KACrE,CAACN,MAAO,UAAWK,YAAa,aAAcC,OAAQ,GACtD,CAACN,MAAO,gBAAiBK,YAAa,aAAcC,OAAQ,KAC5D,CAACN,MAAO,yBAA0BK,YAAa,aAAcC,OAAQ,KACrE,CAACN,MAAO,0BAA2BK,YAAa,aAAcC,OAAQ,OAiB1EF,cAbyB,WAAyB,IAAxBb,EAAwB0B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,KAAOG,EAAUH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClD,OAAOC,EAAOhC,MACV,IAAK,iBACD,OAAOgC,EAAO/B,QAClB,QACI,OAAOE,MCTnB8B,IAASC,OACL1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAUC,MAAOC,YAAYC,IAC1B9B,EAAAC,EAAAC,cAAC6B,EAAD,OAGDC,SAASC,eAAe,SFkHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7601bba3.chunk.js","sourcesContent":["/*########################### This code is written by Norhan El-Deeb @2019 #########################*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectMovie } from '../actions/index';\r\n\r\nconst MovieList = ({ movies, selectMovie }) => {\r\n        const listItems = movies.map((movie) => {\r\n            return (\r\n                <div key={movie.title}>\r\n                <span className=\"d-inline-flex p-2 bd-highlight\">{movie.title}</span>\r\n                <button className=\"btn-success\" onClick={() => selectMovie(movie)}>details</button>\r\n                </div>\r\n            )            \r\n        }) \r\n\r\n        return (\r\n            <div className=\"list-container card card-body my-3\">\r\n                <h2>Movies List <i class=\"fas fa-video\"></i></h2>\r\n                <ul>\r\n                { listItems } \r\n                </ul>\r\n            </div>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        movies: state.movies\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    selectMovie\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieList)","/*########################### This code is written by Norhan El-Deeb @2019 #########################*/\r\n\r\nexport const selectMovie = (movie) =>{\r\n    return{\r\n        type:'Movie_Selected',\r\n        payload: movie\r\n    }\r\n}\r\n\r\n","/*########################### This code is written by Norhan El-Deeb @2019 #########################*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst MovieDetails = ({ selectedMovie }) => {\r\n    if(!selectedMovie) {\r\n        return (\r\n            <div className=\"card card-body my-3\" >\r\n                <h2 className=\"mb-4\">Movie Details <i class=\"fas fa-film\"></i></h2>\r\n            </div>\r\n            \r\n        )       \r\n    }\r\n    else{\r\n        return (\r\n        \r\n            <div className=\"details-container card card-body my-3\" >\r\n                <h2 className=\"mb-4\">Movie Details :</h2>\r\n                <div className=\"properties\">\r\n                    <ul>\r\n                    <p>Title: {selectedMovie.title}</p>\r\n                    <p>Release Date: {selectedMovie.releaseDate}</p>\r\n                    <p>Rating: {selectedMovie.rating}</p>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selectedMovie: state.selectedMovie\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MovieDetails);","/*########################### This code is written by Norhan El-Deeb @2019 #########################*/\n\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MovieList from './components/MovieList'\nimport './App.css';\nimport MovieDetails from './components/MovieDetails';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\" mb-4 mt-4 text-center\">IMDB Cinema</h1>\n        <div className=\"container\">\n          <MovieList />\n          <MovieDetails />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*########################### This code is written by Norhan El-Deeb @2019 #########################*/\r\n\r\nimport {combineReducers} from 'redux';\r\n\r\nconst moviesReducers = () =>{\r\n    return[\r\n        {title: 'Spider-Man: Homecoming', releaseDate: '05-07-2019', rating: 7.4,},\r\n        {title: 'Aquaman', releaseDate: '12-07-2019', rating: 7,},\r\n        {title: 'Black Panther', releaseDate: '02-13-2019', rating: 7.7,},\r\n        {title: 'Avengers: Infinity War', releaseDate: '05-25-2019', rating: 8.4,},\r\n        {title: 'Guardians of the galaxy', releaseDate: '07-30-2019', rating: 6.4,},\r\n    ]\r\n}\r\n\r\nconst selectedMovieReducer = (state= null , action) =>{\r\n    switch(action.type){\r\n        case 'Movie_Selected':\r\n            return action.payload\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default combineReducers({\r\n    movies: moviesReducers,\r\n    selectedMovie : selectedMovieReducer\r\n})\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux'; \nimport reducers from './reducers';\n\n\nReactDOM.render(\n    <Provider store={createStore(reducers)}>\n       <App />\n    </Provider>\n\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}